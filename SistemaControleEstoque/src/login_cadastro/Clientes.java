/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package login_cadastro;

import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import usuarios.Externo;
import usuarios.TipoExterno;
        

/**
 *
 * @author COMPUTADOR
 */
public class Clientes extends javax.swing.JFrame {

    /**
     * Creates new form Clientes
     */
    public Clientes() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtTelefone = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtProduto = new javax.swing.JTextField();
        btnCadastrar = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableClientes = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Nome:");

        jLabel2.setText("Email:");

        jLabel3.setText("Telefone:");

        jLabel4.setText("Produto:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        tableClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Email", "Telefone", "Produto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableClientes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCadastrar)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemover)))
                .addGap(0, 15, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCadastrar)
                    .addComponent(btnRemover))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE))
        );

        this.setResizable(false);
        this.carregarClientes();

        pack();
    }// </editor-fold>//GEN-END:initComponents
                     
    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {
        DefaultTableModel dtmClientes = (DefaultTableModel) tableClientes.getModel();
        if (txtNome.getText().trim().equals("") || txtEmail.getText().trim().equals("") || txtTelefone.getText().trim().equals("") || txtProduto.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Campo(s) não preenchidos", null, JOptionPane.ERROR_MESSAGE);
        }
        else {
            if (txtEmail.getText().contains("@") && txtEmail.getText().contains(".com")) {
                if (verificarTelefone()) {
                    JOptionPane.showMessageDialog(null,"Telefone inválido", null, JOptionPane.ERROR_MESSAGE);
                }
                else if(verificarProduto()) {
                    JOptionPane.showMessageDialog(null,"Produto inválido", null, JOptionPane.ERROR_MESSAGE);
                }
                else {
                    if (clienteExistente(txtEmail.getText())) {
                        Object[] dados = {txtNome.getText(), txtEmail.getText(), txtTelefone.getText(), txtProduto.getText()};
                        dtmClientes.addRow(dados);
                        cadastrar();
                    }
                    else {
                        JOptionPane.showMessageDialog(null, "Este cliente já existe", null, JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
            else {
                JOptionPane.showMessageDialog(null, "Email inválido", null, JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        removerCliente();
    }//GEN-LAST:event_btnRemoverActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Clientes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnRemover;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableClientes;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtProduto;
    private javax.swing.JTextField txtTelefone;
    // End of variables declaration                   

    private void cadastrar() {
        Externo cliente = new Externo();
        cliente.setNome(txtNome.getText()); 
        cliente.setEmail(txtEmail.getText());
        cliente.setTelefone(txtTelefone.getText());
        cliente.setCodProduto(txtProduto.getText());
        cliente.setTipoExterno(TipoExterno.CLIENTE);
        
        try {
            FileWriter fw = new FileWriter("SistemaControleEstoque/src/db/cliente.csv", true); //criado dentro do projeto, porém da para passar o diretório onde queremos criar
            PrintWriter pw = new PrintWriter(fw);
            pw.print(cliente.getNome()+";");
            pw.print(cliente.getEmail()+";");
            pw.print(cliente.getTelefone()+";");
            pw.println(cliente.getCodProduto()+";");
            pw.flush(); //envia dados
            pw.close();
            fw.close();
            
            JOptionPane.showMessageDialog(null, "Cadastro realizado com sucesso");
            txtEmail.setText("");
            txtNome.setText("");
            txtTelefone.setText("");
            txtProduto.setText("");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }

    private boolean clienteExistente(String email) {
        String file = "SistemaControleEstoque/src/db/cliente.csv";
        BufferedReader reader = null;
        String line = "";
        boolean result = true;
        
        try {
            reader = new BufferedReader(new FileReader(file));
            loop: {
                while ((line = reader.readLine()) != null) {
                    String[] row = line.split(";");
                    for (String string : row) {
                        if (string.equals(email)) {
                            result = false;
                            break loop;
                        }
                    }
                }
            }
        } catch (HeadlessException | IOException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
        return result;
    }
    
    private void carregarClientes() {
        String file = "SistemaControleEstoque/src/db/cliente.csv";
        BufferedReader reader = null;
        String line = "";
        DefaultTableModel dtmClientes = (DefaultTableModel) tableClientes.getModel();
        try {
            reader = new BufferedReader(new FileReader(file));
            
            while ((line = reader.readLine()) != null) {
                String[] row = line.split(";");
                for (int i = 0; i < (row.length - 3); i++) {
                    Object[] dados = {(String) row[i], (String) row[i+1], (String) row[i+2], (String) row[i+3]};
                    dtmClientes.addRow(dados);
                }
            }
            
        } catch (HeadlessException | IOException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }

    private boolean verificarTelefone() {
        char [] letras = txtTelefone.getText().toCharArray();
        if (letras.length != 9) {
            return true;
        }
        for (char l : letras) {
            if(l != '0' && l != '1' && l != '2' && l != '3' && l != '4' && l != '5'&& l != '6' && l != '7' && l != '8' && l != '9') {
                return true;
            } 
        }
        return false;
    }

    private boolean verificarProduto() {
        char [] letras = txtProduto.getText().toCharArray();
        for (char l : letras) {
            if(l != '0' && l != '1' && l != '2' && l != '3' && l != '4' && l != '5'&& l != '6' && l != '7' && l != '8' && l != '9') {
                return true;
            } 
        }
        return false;
    }
    
    public void removerCliente() {
        String caminhoArquivo = "SistemaControleEstoque/src/db/cliente.csv"; // Caminho do arquivo CSV
        String stringParaRemover = JOptionPane.showInputDialog(null, "Digite o email do cliente:");
        if (clienteExistente(stringParaRemover) == false) {
            List<String> linhas = new ArrayList<>();

            // Lê o arquivo e armazena as linhas em uma lista, exceto a linha a ser removida
            try (BufferedReader leitor = new BufferedReader(new FileReader(caminhoArquivo))) {
                String linha;

                while ((linha = leitor.readLine()) != null) {
                    if (!linha.contains(stringParaRemover)) {
                        linhas.add(linha);
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            // Escreve as linhas atualizadas no arquivo
            try (BufferedWriter escritor = new BufferedWriter(new FileWriter(caminhoArquivo))) {
                for (String linha : linhas) {
                    escritor.write(linha);
                    escritor.newLine();
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
            }
            
            DefaultTableModel dtmClientes = (DefaultTableModel) tableClientes.getModel();
            dtmClientes.setRowCount(0);
            carregarClientes();
            JOptionPane.showMessageDialog(null, "Cliente removido com sucesso", null, JOptionPane.INFORMATION_MESSAGE);
        }
        else if(stringParaRemover == null) {
        }
        else {
            JOptionPane.showMessageDialog(null,"Email inválido.", null, JOptionPane.ERROR_MESSAGE);
        }
    }
}
